{"version":3,"sources":["components/HeaderLink.tsx","pages/FragmentSignature.tsx","pages/TransactionDataParser.tsx","pages/ErrorDataParser.tsx","pages/EventLogDataParser.tsx","pages/UnitConverter.tsx","App.tsx","index.tsx"],"names":["HeaderLink","props","match","useRouteMatch","path","to","exact","type","className","checked","readOnly","children","FragmentSignature","iface","sigHash","useState","abi","setAbi","fragment","setFragment","invalidAbi","invalidFragment","ethers","utils","Interface","getSighash","e","console","log","getEventTopic","classNames","value","onChange","target","placeholder","deploy","name","disabled","Object","entries","functions","map","idx","funcName","events","eventName","errors","errName","TransactionDataParser","txDesc","data","setData","invalidTx","parseTransaction","signature","args","arg","toString","ErrorDataParser","errorDesc","invalidError","parseError","EventLogDataParser","logDesc","topics","setTopics","datas","setDatas","invalidLog","parseLog","join","topic","prevTopics","newTopics","splice","push","length","prevDatas","newDatas","UnitConverter","output","input","setInput","conversion","setConversion","decimals","setDecimals","invalidConversion","invalidInput","invalidDecimals","step","min","Wrapper","styled","div","Container","routes","component","App","route","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.2fd11cc0.chunk.js","sourcesContent":["import { Link, useRouteMatch } from 'react-router-dom';\n\nexport default function HeaderLink(props: { to: string; children: string }) {\n  const match = useRouteMatch({ path: props.to, exact: true });\n  return (\n    <Link to={props.to}>\n      <label>\n        <input\n          type='radio'\n          className='nes-radio is-dark'\n          checked={!!match}\n          readOnly\n        />\n        <span>{props.children}</span>\n      </label>\n    </Link>\n  );\n}\n","import { useState } from 'react';\nimport { ethers } from 'ethers';\nimport classNames from 'classnames';\n\nexport default function FragmentSignature() {\n  const [abi, setAbi] = useState('');\n  const [fragment, setFragment] = useState('');\n  let iface: undefined | ethers.utils.Interface;\n  let sigHash;\n  let invalidAbi = false;\n  let invalidFragment = false;\n  try {\n    iface = new ethers.utils.Interface(abi);\n    try {\n      sigHash = iface.getSighash(fragment);\n    } catch (e) {\n      console.log(e);\n      try {\n        sigHash = iface.getEventTopic(fragment);\n      } catch (e) {\n        console.log(e);\n        invalidFragment = true;\n      }\n    }\n  } catch (e) {\n    console.log(e);\n    invalidAbi = true;\n  }\n  return (\n    <>\n      <div className='nes-field'>\n        <label>ABI</label>\n        <textarea\n          className={classNames('nes-textarea nes-pointer is-dark', {\n            'is-error': invalidAbi,\n          })}\n          value={abi}\n          onChange={(e) => setAbi(e.target.value)}\n          placeholder='[]'\n        />\n      </div>\n      <br />\n      <div className='nes-field'>\n        <label>Fragment</label>\n        <div\n          className={classNames('nes-select nes-pointer is-dark', {\n            'is-error': invalidFragment,\n          })}\n        >\n          <select\n            value={fragment}\n            onChange={(e) => setFragment(e.target.value)}\n          >\n            {iface && (\n              <>\n                {iface.deploy.name && (\n                  <>\n                    <option disabled>-- Constructor --</option>\n                    <option disabled>{iface.deploy.name}</option>\n                  </>\n                )}\n                <option disabled>-- Functions --</option>\n                {Object.entries(iface.functions).map(([funcName], idx) => (\n                  <option key={idx}>{funcName}</option>\n                ))}\n                <option disabled>-- Events --</option>\n                {Object.entries(iface.events).map(([eventName], idx) => (\n                  <option key={idx}>{eventName}</option>\n                ))}\n                <option disabled>-- Errors --</option>\n                {Object.entries(iface.errors).map(([errName], idx) => (\n                  <option key={idx}>{errName}</option>\n                ))}\n              </>\n            )}\n          </select>\n        </div>\n      </div>\n      <br />\n      <>{sigHash}</>\n    </>\n  );\n}\n","import { useState } from 'react';\nimport { ethers } from 'ethers';\nimport classNames from 'classnames';\n\nexport default function TransactionDataParser() {\n  const [abi, setAbi] = useState('');\n  const [data, setData] = useState('');\n  let iface: undefined | ethers.utils.Interface;\n  let txDesc;\n  let invalidAbi = false;\n  let invalidTx = false;\n  try {\n    iface = new ethers.utils.Interface(abi);\n    try {\n      txDesc = iface.parseTransaction({ data });\n    } catch (e) {\n      console.log(e);\n      invalidTx = true;\n    }\n  } catch (e) {\n    console.log(e);\n    invalidAbi = true;\n  }\n  return (\n    <>\n      <div className='nes-field'>\n        <label>ABI</label>\n        <textarea\n          className={classNames('nes-textarea nes-pointer is-dark', {\n            'is-error': invalidAbi,\n          })}\n          value={abi}\n          onChange={(e) => setAbi(e.target.value)}\n          placeholder='[]'\n        />\n      </div>\n      <br />\n      <div className='nes-field'>\n        <label>Transaction Data</label>\n        <textarea\n          className={classNames('nes-textarea nes-pointer is-dark', {\n            'is-error': invalidTx,\n          })}\n          value={data}\n          onChange={(e) => setData(e.target.value)}\n          placeholder='0x0'\n        />\n      </div>\n      <br />\n      {txDesc && (\n        <>\n          <>{txDesc.signature}</>\n          <br />\n          {Object.entries(txDesc.args).map(([name, arg], idx) => (\n            <div key={idx}>\n              {name}: {arg.toString()}\n            </div>\n          ))}\n          <br />\n        </>\n      )}\n    </>\n  );\n}\n","import { useState } from 'react';\nimport { ethers } from 'ethers';\nimport classNames from 'classnames';\n\nexport default function ErrorDataParser() {\n  const [abi, setAbi] = useState('');\n  const [data, setData] = useState('');\n  let iface: undefined | ethers.utils.Interface;\n  let errorDesc;\n  let invalidAbi = false;\n  let invalidError = false;\n  try {\n    iface = new ethers.utils.Interface(abi);\n    try {\n      errorDesc = iface.parseError(data);\n    } catch (e) {\n      console.log(e);\n      invalidError = true;\n    }\n  } catch (e) {\n    console.log(e);\n    invalidAbi = true;\n  }\n  return (\n    <>\n      <div className='nes-field'>\n        <label>ABI</label>\n        <textarea\n          className={classNames('nes-textarea nes-pointer is-dark', {\n            'is-error': invalidAbi,\n          })}\n          value={abi}\n          onChange={(e) => setAbi(e.target.value)}\n          placeholder='[]'\n        />\n      </div>\n      <br />\n      <div className='nes-field'>\n        <label>Error Data</label>\n        <textarea\n          className={classNames('nes-textarea nes-pointer is-dark', {\n            'is-error': invalidError,\n          })}\n          value={data}\n          onChange={(e) => setData(e.target.value)}\n          placeholder='0x0'\n        />\n      </div>\n      <br />\n      {errorDesc && (\n        <>\n          <>{errorDesc.signature}</>\n          <br />\n          {Object.entries(errorDesc.args).map(([name, arg], idx) => (\n            <div key={idx}>\n              {name}: {arg.toString()}\n            </div>\n          ))}\n          <br />\n        </>\n      )}\n    </>\n  );\n}\n","import { useState } from 'react';\nimport { ethers } from 'ethers';\nimport classNames from 'classnames';\n\nexport default function EventLogDataParser() {\n  const [abi, setAbi] = useState('');\n  const [topics, setTopics] = useState<string[]>([]);\n  const [datas, setDatas] = useState<string[]>([]);\n  let iface: undefined | ethers.utils.Interface;\n  let logDesc;\n  let invalidAbi = false;\n  let invalidLog = false;\n  try {\n    iface = new ethers.utils.Interface(abi);\n    try {\n      logDesc = iface.parseLog({ topics, data: `0x${datas.join('')}` });\n    } catch (e) {\n      console.log(e);\n      invalidLog = true;\n    }\n  } catch (e) {\n    console.log(e);\n    invalidAbi = true;\n  }\n  return (\n    <>\n      <div className='nes-field'>\n        <label>ABI</label>\n        <textarea\n          className={classNames('nes-textarea nes-pointer is-dark', {\n            'is-error': invalidAbi,\n          })}\n          value={abi}\n          onChange={(e) => setAbi(e.target.value)}\n          placeholder='[]'\n        />\n      </div>\n      <br />\n      <div className='nes-field'>\n        <label>Topics Data</label>\n        {topics.map((topic, idx) => (\n          <input\n            key={idx}\n            type='text'\n            className={classNames('nes-input nes-pointer is-dark', {\n              'is-error': invalidLog,\n            })}\n            value={topic}\n            onChange={(e) => {\n              setTopics((prevTopics) => {\n                const newTopics = [...prevTopics];\n                if (e.target.value) {\n                  newTopics[idx] = e.target.value;\n                } else {\n                  newTopics.splice(idx, 1);\n                }\n                return newTopics;\n              });\n            }}\n            placeholder='0x0'\n          />\n        ))}\n        <input\n          key={topics.length}\n          type='text'\n          className={classNames('nes-input is-dark', {\n            'is-error': invalidLog,\n          })}\n          value={''}\n          onChange={(e) => {\n            setTopics((prevTopics) => {\n              const newTopics = [...prevTopics];\n              newTopics.push(e.target.value);\n              return newTopics;\n            });\n          }}\n          placeholder='0x0'\n        />\n      </div>\n      <br />\n      <div className='nes-field'>\n        <label>Event Data</label>\n        {datas.map((data, idx) => (\n          <input\n            key={idx}\n            type='text'\n            className={classNames('nes-input is-dark', {\n              'is-error': invalidLog,\n            })}\n            value={data}\n            onChange={(e) => {\n              setDatas((prevDatas) => {\n                const newDatas = [...prevDatas];\n                if (e.target.value) {\n                  newDatas[idx] = e.target.value;\n                } else {\n                  newDatas.splice(idx, 1);\n                }\n                return newDatas;\n              });\n            }}\n            placeholder='0'\n          />\n        ))}\n        <input\n          key={datas.length}\n          type='text'\n          className={classNames('nes-input is-dark', {\n            'is-error': invalidLog,\n          })}\n          value={''}\n          onChange={(e) => {\n            setDatas((prevDatas) => {\n              const newDatas = [...prevDatas];\n              newDatas.push(e.target.value);\n              return newDatas;\n            });\n          }}\n          placeholder='0'\n        />\n      </div>\n      <br />\n      {logDesc && (\n        <>\n          <>{logDesc.signature}</>\n          <br />\n          {Object.entries(logDesc.args).map(([name, arg], idx) => (\n            <div key={idx}>\n              {name}: {arg.toString()}\n            </div>\n          ))}\n          <br />\n        </>\n      )}\n    </>\n  );\n}\n","import { useState } from 'react';\nimport { ethers } from 'ethers';\nimport classNames from 'classnames';\n\nexport default function UnitConverter() {\n  const [input, setInput] = useState('');\n  const [conversion, setConversion] = useState('parseUnits');\n  const [decimals, setDecimals] = useState('');\n  let output;\n  let invalidConversion = false;\n  let invalidInput = false;\n  let invalidDecimals = false;\n  try {\n    if (conversion === 'parseUnits' || conversion === 'formatUnits') {\n      output = ethers.utils[conversion](input, decimals);\n    } else {\n      invalidConversion = true;\n    }\n  } catch (e) {\n    console.log(e);\n    invalidInput = true;\n    invalidDecimals = true;\n  }\n  return (\n    <>\n      <div className='nes-field'>\n        <label>Input</label>\n        <input\n          type='text'\n          className={classNames('nes-input nes-pointer is-dark', {\n            'is-error': invalidInput,\n          })}\n          value={input}\n          onChange={(e) => setInput(e.target.value)}\n          placeholder='1000000000000000000'\n        />\n      </div>\n      <br />\n      <div className='nes-field'>\n        <label>Decimals</label>\n        <input\n          type='number'\n          step='1'\n          min='0'\n          className={classNames('nes-input nes-pointer is-dark', {\n            'is-error': invalidDecimals,\n          })}\n          value={decimals}\n          onChange={(e) => setDecimals(e.target.value)}\n          placeholder='18'\n        />\n      </div>\n      <br />\n      <div className='nes-field'>\n        <label>Conversion</label>\n        <div\n          className={classNames('nes-select nes-pointer is-dark', {\n            'is-error': invalidConversion,\n          })}\n        >\n          <select\n            value={conversion}\n            onChange={(e) => setConversion(e.target.value)}\n          >\n            <option value='parseUnits'>Parse Units (decimal -&gt; uint)</option>\n            <option value='formatUnits'>\n              Format Units (uint -&gt; decimal)\n            </option>\n          </select>\n        </div>\n      </div>\n      <br />\n      <>{output?.toString()}</>\n    </>\n  );\n}\n","import { Switch, Route, Redirect } from 'react-router-dom';\nimport styled from 'styled-components';\n\nimport HeaderLink from './components/HeaderLink';\nimport FragmentSignature from './pages/FragmentSignature';\nimport TransactionDataParser from './pages/TransactionDataParser';\nimport ErrorDataParser from './pages/ErrorDataParser';\nimport EventLogDataParser from './pages/EventLogDataParser';\nimport UnitConverter from './pages/UnitConverter';\n\nconst Wrapper = styled.div`\n  display: flex;\n  justify-content: center;\n  margin: 40px;\n`;\n\nconst Container = styled.div`\n  width: 1024px;\n  display: flex;\n  flex-direction: column;\n`;\n\nconst routes = [\n  {\n    path: '/fragment-signature',\n    name: 'Fragment Signature',\n    component: <FragmentSignature />,\n  },\n  {\n    path: '/transaction-data-parser',\n    name: 'Transaction Data Parser',\n    component: <TransactionDataParser />,\n  },\n  {\n    path: '/error-data-parser',\n    name: 'Error Data Parser',\n    component: <ErrorDataParser />,\n  },\n  {\n    path: '/event-log-data-parser',\n    name: 'Event Log Data Parser',\n    component: <EventLogDataParser />,\n  },\n  {\n    path: '/unit-converter',\n    name: 'Unit Converter',\n    component: <UnitConverter />,\n  },\n];\n\nexport default function App() {\n  return (\n    <Wrapper>\n      <Container className='nes-container is-dark with-title'>\n        <p className='title'>Miscellaneous Eth ABI tools</p>\n        {routes.map((route, idx) => (\n          <HeaderLink key={idx} to={route.path}>\n            {route.name}\n          </HeaderLink>\n        ))}\n        <div className='nes-container is-dark is-rounded'>\n          <Switch>\n            {routes.map((route, idx) => (\n              <Route key={idx} exact path={route.path}>\n                {route.component}\n              </Route>\n            ))}\n            <Route path='/'>\n              <Redirect to={routes[0].path} />\n            </Route>\n          </Switch>\n        </div>\n      </Container>\n    </Wrapper>\n  );\n}\n","import { StrictMode } from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <StrictMode>\n    <Router>\n      <App />\n    </Router>\n  </StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}